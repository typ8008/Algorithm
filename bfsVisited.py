# -*- coding: utf-8 -*-
"""
Created on Tue Feb 18 16:47:30 2020

@author: NowakM
"""
import matplotlib.pyplot as plt
from collections import deque
from random import seed, choice, random, shuffle
import time

GRAPH0 = {0: set([1]),
          1: set([0, 2]),
          2: set([1, 3]),
          3: set([2])}

GRAPH1 = {0: set([1, 2, 3, 4]),
          1: set([0, 2, 3, 4]),
          2: set([0, 1, 3, 4]),
          3: set([0, 1, 2, 4]),
          4: set([0, 1, 2, 3])}


GRAPH5 = {"dog": set(["cat"]),
          "cat": set(["dog"]),
          "monkey": set(["banana"]),
          "banana": set(["monkey", "ape"]),
          "ape": set(["banana"])}


#FILEPATH = "c:/Private/Algorithm/alg_rf7.txt"
FILEPATH = "d:/alg_rf7.txt"

# Helper Methods

def copy_graph(graph):
    """
    Make a copy of a graph
    """
    new_graph = {}
    for node in graph:
        new_graph[node] = set(graph[node])
    return new_graph

def delete_node(ugraph, node):
    """
    Delete a node from an undirected graph
    """
    neighbors = ugraph[node]
    ugraph.pop(node)
    for neighbor in neighbors:
        ugraph[neighbor].remove(node)

def targeted_order(ugraph):
    """
    Compute a targeted attack order consisting
    of nodes of maximal degree
    
    Returns:
    A list of nodes
    """
    # copy the graph
    new_graph = copy_graph(ugraph)
    
    order = []    
    while len(new_graph) > 0:
        max_degree = -1
        for node in new_graph:
            if len(new_graph[node]) > max_degree:
                max_degree = len(new_graph[node])
                max_degree_node = node
        
        neighbors = new_graph[max_degree_node]
        new_graph.pop(max_degree_node)
        for neighbor in neighbors:
            new_graph[neighbor].remove(max_degree_node)

        order.append(max_degree_node)
    return order

def fast_targeted_order(ugraph):
    """
    Takes graph
    Returns list of order nodes
    """
    degree_set = []
    order = []
    new_graph = copy_graph(ugraph)
    
    for k in range(len(ugraph)):
        degree_set.append(set([]))
    
    #print "degre list", degree_set    
    for i in ugraph:
        degree_set[len(ugraph[i])].add(i)
    
   
    for k in range(len(degree_set) - 1,0,-1):
        while len(degree_set[k]) > 0:
            u = degree_set[k].pop()
            
            #for neighbor in new_graph[u]:
            #    d = len(new_graph[neighbor])
            #    print d, neighbor
            #    degree_set[d].remove(neighbor)
            #    degree_set[d-1].add(neighbor)
            
            
            order.append(u)
            
            #new_graph.pop(u)                
                    
    #print "degree list", degree_set
    
    return order

class UPATrial:
    """
    Optimised trials for DPA algorithm
    Uses random.choice() to select a node number from this list for each trial
    """
    def __init__(self,num_nodes):
        """
        Initialize a DPATrial object corresponding to a 
        complete graph with num_nodes nodes
        
        Note the initial list of node numbers has num_nodes copies of
        each node number
        """       
        self._num_nodes = num_nodes
        self._node_numbers = [node for node in range (num_nodes) for dummy_idx in range(num_nodes)]
        #print self._node_numbers

    def run_trial(self, num_nodes):
        """
        Conduct num_node trials using by applying random.choice()
        to the list of node numbers
        
        Updates the list of node numbers so that each node number
        appears in correct ratio
        
        Returns:
        Set of nodes
        """
        
        # compute the neighbors for the newly-created node
        new_node_neighbors = set()
        for dummy_idx in range(num_nodes):
            new_node_neighbors.add(choice(self._node_numbers))
        
        # update the list of node numbers so that each node number 
        # appears in the correct ratio
        self._node_numbers.append(self._num_nodes)
        for dummy_idx in range(len(new_node_neighbors)):
            self._node_numbers.append(self._num_nodes)
        self._node_numbers.extend(list(new_node_neighbors))
        
        #update the number of nodes
        self._num_nodes += 1
        return new_node_neighbors    



def load_graph(path):
    """"
    Function takes file path and returns graph definition as Dictionary
    """
    
    # initialise dictionary
    graph_dict = {}
    
    # open File for reading
    graph_file = open(path,'r')
    
    # initialise list of all the lines
    graph_lines = graph_file.readlines()   
    print "Loaded graph has", len(graph_lines), "nodes"
    # For all lines get node and edges and put them to SET
    for line in graph_lines:
        neighbors = line.split(' ')
        node = int(neighbors[0])
        graph_dict[node] = set([])
        for neighbor in neighbors[1:-1]:
            graph_dict[node].add(int(neighbor))
            
    return graph_dict

def make_complete_graph(num_nodes):
    """
    Take number of nodes and returns dictionary representing graph 
    with all possible edges without self loop
    """
    # if number of nodes is positive number
    if num_nodes > 0:
         # Define empty dictionary
        graph = {}
        for node in range(num_nodes):
            node_list = range(num_nodes)
            node_list.remove(node)
            graph[node] = set(node_list)
        return graph
    
    return {}

def random_ER_graph(num_nodes,probability):
    """
    Function takes number of nodes and probability
    returns graph as dictionary
    """    

    graph_dict = {}
    seed(1)
    
    for node_i in range(num_nodes):
        if node_i not in graph_dict:
            graph_dict[node_i] = set([])
        for node_j in range(num_nodes):
            a_rand = random()
            if a_rand < probability:
                if node_i != node_j:
                    graph_dict[node_i].add(node_j)
                    
                    if node_j in graph_dict:
                        graph_dict[node_j].add(node_i)
                    else:
                        graph_dict[node_j] = set([node_i]) 

    return graph_dict

def random_UPA_graph(num_nodes,m_nodes):
    """ 
    Takes total number of nodes and number of nodes new node will be connected to
    return graph as a dictionary
    """
    graph_dict = make_complete_graph(m_nodes)
    
    trial = UPATrial(m_nodes)
        
    for node in range(m_nodes, num_nodes):
        graph_dict[node] = trial.run_trial(m_nodes)
        for item in graph_dict[node]:
            graph_dict[item].add(node)
    
    return graph_dict


def bfs_visited(upgraph, start_node):
    """
    Takes undirected graph and start node and 
    returns set consisting of all nodes that are visited by breath-first search
    """
    visited = set([])
    queue = deque()
    visited.add(start_node)
    queue.append(start_node)
    
    while len(queue) > 0:
        node = queue.pop()

        for neighbor in upgraph[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)
    
    return visited

def cc_visited(ugraph):
    """
    Takes undirected graph and 
    returns list of sets, where each set consists of all the nodes in a connected
    components
    """
    remaining_nodes = [node for node in ugraph]
    connected_components = []
    
    while len(remaining_nodes) > 0:
        node = remaining_nodes[0]
        set_w = bfs_visited(ugraph,node)
        if set_w not in connected_components:
            connected_components.append(set_w)
        remaining_nodes.pop(0)
    
    return connected_components

def largest_cc_size(ugraph):
    """
    Takes undirected graph and
    returns integer of largest connected set
    """
    cc_list = cc_visited(ugraph)
    largest = 0
    for item in cc_list:
        if len(item) > largest:
            largest = len(item)
    
    return largest

def compute_resilience(ugraph,attack_order):
    """
    Takes undirected graph and list of nodes and 
    returns list of largest connected components
    """
    lcc_list = []
    
    lcc_list.append(largest_cc_size(ugraph))
    print lcc_list
    for node in attack_order:
        if node in ugraph:
            node_set = ugraph.pop(node)
        #edge_list = list(node_set)
        
            for edge in node_set:
                ugraph[edge].remove(node)    
            #for edge in edge_list:
            #temp_set = ugraph.pop(edge)
            #temp_set.discard(node)
            #ugraph[edge] = temp_set
            
        #copy_ugraph = copy_graph(ugraph)    
        #lcc_list.append(largest_cc_size(copy_ugraph))
            lcc_list.append(largest_cc_size(ugraph))
    return lcc_list


def random_order(ugraph):
    node_list  = []
    
    for node in ugraph:
        node_list.append(node)
    shuffle(node_list)

    return node_list    


def graph_plot(graph_dict, er_graph, upa_graph):
    
    idx = []
    val_y = []
    idx_er = []
    val_er_y = []
    idx_upa = []
    val_upa_y = []
    
    
    for key in range(len(graph_dict)):
        idx.append(key)
        val_y.append(graph_dict[key])
        val_er_y.append(er_graph[key])
        val_upa_y.append(upa_graph[key])
        
    plt.plot(idx,val_y,'b', label='Computer Network graph')
    plt.plot(idx,val_er_y,'r', label='ER graph with p = 0.004')
    plt.plot(idx,val_upa_y,'g', label='UPA graph with m=3')
    
    #plt.xscale("log")
    #plt.yscale("log")
    #plt.title("Log/Log plot of in_degree distribution")
    plt.title("Network Resilience plot for Targeted attacks")
    plt.ylabel("Largest Connected Component")
    plt.xlabel("Attacked Nodes")
    plt.legend(loc="upper right")
    plt.grid()
    #plt.figure(figsize=[10.0,10.0],dpi=600,frameon=True)
    #plt.draw()
    plt.show()

def calc_prob(ugraph):
    """
    Takes undirected graph
    returns probability and average number of edges.
    """
    counter = 0
    
    for node in ugraph:
        
        counter += len(ugraph[node])
     
    average = counter/float(len(ugraph))

    probability = average/float(len(ugraph))
    
    return [probability, average/2]


graph_dict = load_graph(FILEPATH)    
#er_graph = random_ER_graph(len(graph_dict),0.004)
#udp_graph = random_UPA_graph(len(graph_dict),3)

#attack_order = fast_targeted_order(graph_dict)
#attack_order_er = targeted_order(er_graph)
#attack_order_udp = fast_targeted_order(udp_graph)

#graph_resilience = compute_resilience(graph_dict, attack_order)
#print "Graph", graph_resilience
graph_resilience = [1239, 1158, 1150, 1148, 1142, 1135, 1129, 1127, 1124, 1120, 1119, 1118, 1109, 1101, 1100, 1099, 1096, 1095, 1093, 1062, 1060, 1059, 1055, 1054, 1043, 1040, 1030, 1026, 1024, 1011, 1005, 1004, 999, 998, 997, 993, 992, 985, 981, 977, 976, 975, 973, 950, 943, 936, 929, 905, 896, 880, 878, 875, 871, 868, 863, 800, 755, 753, 694, 693, 675, 642, 470, 470, 467, 399, 397, 394, 394, 347, 347, 347, 347, 347, 347, 347, 340, 337, 323, 323, 322, 322, 322, 322, 322, 322, 322, 322, 322, 309, 307, 307, 307, 224, 224, 224, 224, 224, 217, 217, 217, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 184, 184, 184, 173, 173, 161, 161, 161, 161, 161, 161, 159, 159, 159, 159, 159, 134, 134, 132, 132, 132, 132, 132, 132, 130, 130, 116, 116, 116, 116, 89, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 35, 35, 35, 35, 35, 35, 35, 35, 35, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 29, 29, 29, 26, 26, 26, 26, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
#er_resilience = compute_resilience(er_graph,attack_order_er)
print "ER", er_resilience
#er_resilience = [1239, 1238, 1237, 1236, 1235, 1234, 1233, 1232, 1231, 1230, 1229, 1228, 1227, 1226, 1225, 1224, 1223, 1222, 1221, 1220, 1219, 1218, 1217, 1216, 1215, 1214, 1213, 1212, 1211, 1210, 1209, 1208, 1207, 1206, 1205, 1204, 1203, 1202, 1201, 1200, 1199, 1198, 1197, 1196, 1195, 1194, 1193, 1192, 1191, 1190, 1189, 1188, 1187, 1186, 1185, 1184, 1183, 1182, 1181, 1180, 1179, 1178, 1177, 1176, 1175, 1174, 1173, 1172, 1171, 1170, 1169, 1168, 1167, 1166, 1165, 1164, 1163, 1162, 1161, 1160, 1159, 1158, 1157, 1156, 1155, 1154, 1153, 1152, 1151, 1150, 1149, 1148, 1147, 1146, 1145, 1144, 1143, 1142, 1141, 1140, 1139, 1138, 1137, 1136, 1135, 1134, 1133, 1132, 1131, 1130, 1129, 1128, 1127, 1126, 1125, 1124, 1123, 1122, 1121, 1120, 1119, 1118, 1117, 1116, 1115, 1114, 1113, 1112, 1111, 1110, 1109, 1108, 1107, 1106, 1105, 1104, 1103, 1102, 1101, 1100, 1099, 1098, 1097, 1096, 1095, 1094, 1093, 1092, 1091, 1090, 1089, 1088, 1087, 1086, 1085, 1084, 1083, 1082, 1081, 1080, 1079, 1078, 1077, 1076, 1075, 1074, 1073, 1072, 1071, 1070, 1069, 1068, 1067, 1066, 1065, 1064, 1063, 1062, 1061, 1060, 1059, 1058, 1057, 1056, 1055, 1054, 1053, 1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045, 1044, 1043, 1042, 1041, 1040, 1039, 1038, 1037, 1036, 1035, 1034, 1033, 1032, 1031, 1030, 1029, 1028, 1027, 1026, 1025, 1024, 1023, 1022, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1014, 1013, 1012, 1011, 1010, 1009, 1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001, 1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971, 970, 969, 968, 967, 966, 965, 964, 963, 962, 961, 960, 959, 958, 957, 956, 955, 954, 953, 952, 951, 950, 949, 948, 947, 946, 945, 944, 943, 942, 941, 940, 939, 938, 937, 936, 935, 934, 933, 932, 931, 930, 929, 928, 927, 926, 925, 924, 923, 922, 921, 920, 919, 918, 917, 916, 915, 914, 913, 912, 911, 910, 909, 908, 907, 906, 905, 904, 903, 902, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 888, 887, 885, 884, 883, 882, 881, 880, 879, 878, 877, 876, 875, 874, 873, 872, 871, 870, 869, 868, 867, 866, 865, 864, 863, 862, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851, 850, 849, 848, 847, 846, 845, 844, 843, 842, 841, 840, 839, 837, 836, 835, 834, 833, 832, 831, 830, 829, 828, 827, 826, 825, 824, 823, 822, 821, 819, 818, 816, 815, 814, 813, 812, 811, 809, 808, 807, 806, 805, 803, 802, 800, 799, 798, 797, 796, 795, 794, 793, 792, 791, 790, 789, 788, 787, 786, 785, 783, 782, 781, 780, 779, 778, 777, 776, 775, 774, 773, 772, 771, 770, 769, 768, 767, 766, 765, 764, 763, 762, 760, 759, 758, 757, 756, 755, 754, 753, 752, 751, 750, 749, 748, 747, 746, 745, 744, 743, 742, 741, 740, 739, 738, 737, 736, 735, 734, 733, 732, 731, 730, 729, 728, 726, 725, 724, 723, 722, 721, 720, 719, 718, 717, 716, 715, 714, 713, 712, 711, 710, 709, 708, 707, 706, 705, 704, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 681, 680, 679, 678, 677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 666, 664, 663, 662, 661, 660, 659, 657, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 642, 641, 640, 639, 638, 637, 636, 635, 633, 631, 630, 626, 625, 624, 623, 622, 620, 619, 618, 617, 616, 615, 614, 613, 612, 611, 608, 607, 606, 604, 603, 602, 601, 600, 599, 598, 596, 594, 593, 592, 591, 590, 589, 588, 587, 586, 585, 583, 581, 580, 579, 578, 577, 576, 571, 570, 569, 568, 567, 566, 565, 564, 563, 562, 561, 560, 557, 557, 557, 555, 554, 553, 552, 551, 550, 549, 547, 546, 543, 540, 539, 538, 537, 536, 535, 534, 533, 532, 530, 529, 527, 526, 525, 524, 523, 522, 521, 520, 518, 517, 516, 515, 512, 511, 509, 508, 507, 506, 502, 499, 498, 496, 495, 494, 493, 492, 491, 490, 489, 488, 488, 487, 483, 482, 481, 479, 479, 477, 474, 473, 471, 467, 465, 465, 464, 463, 462, 459, 458, 457, 456, 455, 454, 453, 450, 447, 446, 446, 444, 442, 441, 440, 439, 438, 437, 432, 431, 428, 426, 423, 422, 421, 420, 418, 416, 415, 412, 412, 411, 410, 409, 407, 406, 394, 394, 389, 386, 385, 383, 371, 370, 369, 368, 363, 362, 360, 360, 359, 356, 354, 354, 347, 342, 342, 341, 340, 338, 336, 335, 333, 332, 331, 330, 330, 327, 316, 316, 316, 315, 314, 312, 308, 306, 305, 304, 303, 301, 294, 291, 287, 287, 286, 285, 284, 284, 273, 272, 272, 270, 265, 250, 249, 245, 237, 235, 211, 211, 210, 209, 209, 209, 208, 208, 203, 203, 201, 200, 152, 97, 97, 96, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 93, 93, 92, 90, 90, 53, 53, 53, 51, 51, 50, 50, 50, 48, 48, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 38, 38, 38, 38, 37, 37, 37, 37, 37, 37, 37, 37, 37, 36, 36, 36, 36, 36, 36, 36, 36, 35, 35, 35, 29, 29, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
er_resilience = [1239, 1238, 1237, 1236, 1235, 1234, 1233, 1232, 1231, 1230, 1229, 1228, 1227, 1226, 1225, 1224, 1223, 1222, 1221, 1220, 1219, 1218, 1217, 1216, 1215, 1214, 1213, 1212, 1211, 1210, 1209, 1208, 1207, 1206, 1205, 1204, 1203, 1202, 1201, 1200, 1199, 1198, 1197, 1196, 1195, 1194, 1193, 1192, 1191, 1190, 1189, 1188, 1187, 1186, 1185, 1184, 1183, 1182, 1181, 1180, 1179, 1178, 1177, 1176, 1175, 1174, 1173, 1172, 1171, 1170, 1169, 1168, 1167, 1166, 1165, 1164, 1163, 1162, 1161, 1160, 1159, 1158, 1157, 1156, 1155, 1154, 1153, 1152, 1151, 1150, 1149, 1148, 1147, 1146, 1145, 1144, 1143, 1142, 1141, 1140, 1139, 1138, 1137, 1136, 1135, 1134, 1133, 1132, 1131, 1130, 1129, 1128, 1127, 1126, 1125, 1124, 1123, 1122, 1121, 1120, 1119, 1118, 1117, 1116, 1115, 1114, 1113, 1112, 1111, 1110, 1109, 1108, 1107, 1106, 1105, 1104, 1103, 1102, 1101, 1100, 1099, 1098, 1097, 1096, 1095, 1094, 1093, 1092, 1091, 1090, 1089, 1088, 1087, 1086, 1085, 1084, 1083, 1082, 1081, 1080, 1079, 1078, 1077, 1076, 1075, 1074, 1073, 1072, 1071, 1070, 1069, 1068, 1067, 1066, 1065, 1064, 1063, 1062, 1061, 1060, 1059, 1058, 1057, 1056, 1055, 1054, 1053, 1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045, 1044, 1043, 1042, 1041, 1040, 1039, 1038, 1037, 1036, 1035, 1034, 1033, 1032, 1031, 1030, 1029, 1028, 1027, 1026, 1025, 1024, 1023, 1022, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1014, 1013, 1012, 1011, 1010, 1009, 1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001, 1000, 999, 998, 997, 996, 995, 994, 993, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 978, 977, 976, 975, 974, 973, 972, 971, 970, 969, 968, 967, 966, 965, 964, 963, 962, 961, 960, 959, 958, 957, 956, 955, 954, 953, 952, 951, 950, 949, 948, 947, 946, 945, 944, 943, 942, 941, 940, 939, 938, 937, 936, 935, 934, 933, 932, 931, 930, 929, 928, 927, 926, 924, 923, 922, 921, 920, 919, 918, 917, 916, 915, 914, 913, 912, 911, 910, 909, 908, 907, 906, 905, 904, 903, 902, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 888, 887, 886, 885, 884, 883, 882, 881, 880, 879, 878, 877, 876, 875, 874, 873, 872, 871, 870, 869, 868, 867, 866, 865, 863, 862, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851, 850, 849, 848, 847, 846, 845, 844, 843, 842, 841, 840, 839, 838, 837, 836, 835, 834, 833, 832, 831, 830, 829, 828, 827, 826, 825, 824, 823, 822, 821, 820, 819, 818, 817, 816, 815, 814, 813, 812, 811, 810, 808, 807, 806, 804, 803, 802, 801, 800, 799, 797, 796, 794, 793, 792, 791, 790, 789, 788, 787, 786, 785, 784, 783, 782, 781, 780, 779, 777, 776, 775, 774, 773, 772, 771, 770, 769, 768, 767, 766, 765, 764, 763, 762, 761, 760, 759, 757, 756, 755, 754, 753, 752, 750, 749, 747, 746, 745, 744, 743, 742, 741, 740, 738, 736, 734, 733, 731, 730, 729, 727, 726, 725, 722, 719, 716, 715, 714, 713, 712, 710, 709, 708, 707, 706, 704, 703, 702, 701, 700, 699, 697, 696, 695, 694, 691, 690, 689, 688, 686, 685, 684, 682, 681, 678, 677, 676, 675, 673, 672, 671, 670, 669, 668, 666, 665, 664, 663, 659, 656, 654, 653, 652, 651, 649, 648, 647, 644, 643, 642, 640, 639, 638, 637, 635, 634, 632, 631, 630, 626, 623, 622, 620, 618, 617, 616, 615, 613, 608, 606, 603, 596, 595, 594, 593, 592, 591, 589, 586, 585, 584, 583, 581, 578, 576, 575, 570, 568, 567, 566, 565, 553, 552, 550, 545, 543, 542, 537, 533, 531, 529, 528, 525, 524, 523, 522, 520, 517, 506, 498, 491, 468, 466, 453, 448, 440, 437, 433, 432, 430, 424, 419, 417, 413, 377, 368, 364, 350, 345, 342, 308, 308, 282, 279, 265, 263, 257, 257, 248, 170, 170, 168, 168, 139, 134, 125, 125, 125, 72, 72, 68, 68, 68, 68, 68, 68, 64, 64, 59, 59, 59, 59, 59, 59, 59, 42, 42, 42, 42, 42, 42, 42, 42, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 16, 16, 16, 16, 16, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
#udp_resilience = compute_resilience(udp_graph,attack_order_udp)
#print "UDP", udp_resilience
udp_resilience = [1239, 1238, 1237, 1236, 1235, 1234, 1233, 1232, 1231, 1230, 1229, 1228, 1227, 1226, 1225, 1223, 1222, 1221, 1220, 1219, 1218, 1217, 1216, 1214, 1213, 1212, 1211, 1210, 1208, 1205, 1204, 1202, 1201, 1200, 1199, 1198, 1197, 1196, 1195, 1194, 1193, 1191, 1189, 1188, 1186, 1185, 1184, 1183, 1181, 1179, 1178, 1177, 1174, 1171, 1170, 1168, 1166, 1165, 1164, 1163, 1162, 1161, 1159, 1158, 1157, 1156, 1154, 1153, 1151, 1148, 1147, 1143, 1142, 1141, 1139, 1138, 1135, 1133, 1131, 1129, 1128, 1125, 1123, 1121, 1120, 1118, 1117, 1116, 1115, 1113, 1112, 1111, 1110, 1107, 1105, 1104, 1102, 1101, 1100, 1098, 1097, 1095, 1093, 1091, 1089, 1087, 1084, 1083, 1080, 1079, 1078, 1077, 1076, 1075, 1074, 1072, 1071, 1070, 1069, 1068, 1067, 1064, 1063, 1061, 1059, 1057, 1056, 1054, 1053, 1052, 1051, 1050, 1049, 1048, 1047, 1045, 1044, 1042, 1040, 1036, 1035, 1034, 1033, 1031, 1029, 1027, 1026, 1024, 1021, 1019, 1018, 1016, 1013, 1012, 1011, 1010, 1009, 1008, 1007, 1006, 1003, 1000, 999, 994, 993, 990, 989, 987, 984, 981, 979, 977, 975, 967, 964, 962, 961, 960, 959, 958, 956, 954, 953, 952, 950, 946, 945, 942, 941, 938, 936, 932, 929, 926, 925, 924, 922, 920, 918, 915, 913, 911, 904, 902, 901, 900, 899, 897, 894, 892, 890, 889, 887, 885, 884, 883, 881, 880, 877, 873, 869, 866, 863, 862, 854, 853, 851, 847, 844, 840, 833, 832, 829, 826, 824, 820, 819, 817, 814, 811, 805, 802, 798, 795, 792, 791, 789, 787, 781, 779, 770, 763, 761, 760, 755, 753, 746, 741, 737, 737, 735, 725, 718, 717, 712, 708, 702, 699, 690, 687, 686, 674, 669, 663, 659, 651, 647, 643, 640, 640, 639, 636, 635, 629, 620, 617, 604, 596, 595, 594, 593, 586, 584, 582, 572, 564, 551, 549, 545, 535, 533, 515, 504, 504, 504, 502, 482, 471, 469, 456, 455, 452, 448, 442, 442, 437, 433, 431, 429, 429, 425, 423, 411, 405, 341, 340, 338, 338, 338, 338, 338, 338, 333, 333, 333, 326, 326, 326, 320, 320, 315, 298, 298, 298, 295, 213, 192, 192, 192, 178, 149, 146, 146, 146, 146, 146, 146, 141, 141, 137, 111, 111, 111, 111, 64, 64, 64, 64, 64, 64, 64, 64, 53, 53, 53, 53, 53, 53, 53, 53, 45, 45, 45, 43, 43, 36, 36, 34, 34, 34, 34, 34, 34, 30, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]

#print udp_resilience[0]
#er_resilience = []

#print "len", len(er_resilience)    

#print attack_order

#print graph_dict[1254], graph_dict[267]
#graph_dict[267].remove(1254)

#print graph_dict[1254], graph_dict[267]
#graph_resilience = [1239, 1238, 1237, 1236, 1235, 1234, 1233, 1232, 1230, 1229, 1228, 1227, 1226, 1225, 1222, 1221, 1220, 1219, 1218, 1217, 1215, 1214, 1213, 1212, 1211, 1210, 1209, 1208, 1207, 1206, 1205, 1204, 1202, 1201, 1200, 1199, 1198, 1197, 1196, 1195, 1194, 1190, 1177, 1176, 1175, 1172, 1171, 1169, 1168, 1167, 1165, 1164, 1163, 1162, 1160, 1159, 1158, 1157, 1156, 1155, 1153, 1152, 1151, 1150, 1149, 1148, 1147, 1146, 1145, 1144, 1143, 1142, 1141, 1138, 1137, 1136, 1135, 1134, 1133, 1132, 1131, 1130, 1129, 1128, 1127, 1126, 1125, 1124, 1123, 1122, 1121, 1120, 1119, 1118, 1117, 1116, 1115, 1115, 1114, 1110, 1109, 1108, 1107, 1106, 1105, 1104, 1103, 1102, 1101, 1100, 1099, 1098, 1089, 1088, 1087, 1086, 1085, 1084, 1083, 1080, 1077, 1076, 1075, 1074, 1073, 1068, 1066, 1065, 1064, 1063, 1059, 1058, 1057, 1056, 1055, 1053, 1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045, 1039, 1037, 1036, 1034, 1031, 1030, 1029, 1028, 1025, 1024, 1023, 1022, 1021, 1020, 1019, 1018, 1017, 1016, 1014, 1013, 1002, 1001, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 987, 986, 985, 984, 983, 982, 981, 980, 971, 970, 969, 968, 967, 960, 959, 958, 957, 956, 955, 951, 950, 949, 948, 948, 947, 945, 944, 943, 942, 941, 940, 934, 933, 932, 931, 930, 929, 928, 928, 927, 927, 926, 925, 924, 923, 922, 921, 919, 918, 917, 916, 915, 914, 912, 911, 910, 909, 909, 908, 907, 906, 905, 901, 899, 890, 879, 878, 878, 876, 875, 874, 873, 872, 871, 870, 870, 869, 868, 867, 866, 865, 864, 863, 862, 861, 860, 859, 858, 857, 857, 856, 855, 854, 853, 852, 852, 852, 850, 850, 841, 840, 839, 838, 837, 837, 835, 834, 833, 832, 832, 831, 831, 830, 829, 828, 827, 826, 826, 825, 824, 820, 819, 818, 817, 816, 815, 814, 814, 813, 812, 805, 804, 804, 801, 801, 800, 799, 798, 797, 796, 795, 794, 794, 793, 792, 790, 789, 784, 783, 782, 781, 780, 777, 776, 775, 774, 773, 772, 771, 770, 769, 768, 768, 767, 767, 766, 765, 764, 764, 762, 761, 760, 759, 758, 757, 756, 752, 751, 750, 750, 750, 749, 747, 746, 745, 745, 744, 743, 742, 742, 741, 740, 739, 738, 738, 737, 736, 735, 734, 733, 732, 731, 731, 730, 730, 729, 726, 726, 720, 718, 714, 714, 713, 704, 703, 703, 702, 702, 701, 700, 698, 697, 697, 696, 695, 693, 692, 690, 690, 689, 688, 687, 686, 684, 683, 682, 681, 680, 676, 676, 675, 668, 667, 667, 666, 666, 665, 664, 663, 662, 661, 659, 658, 656, 655, 654, 653, 652, 651, 650, 649, 646, 645, 644, 643, 642, 641, 641, 640, 639, 638, 637, 636, 635, 634, 633, 632, 632, 632, 630, 629, 628, 626, 625, 624, 620, 616, 615, 614, 613, 612, 610, 609, 608, 607, 604, 603, 603, 602, 601, 599, 599, 598, 597, 596, 595, 593, 590, 588, 587, 586, 585, 584, 583, 582, 582, 582, 581, 581, 581, 581, 580, 579, 575, 574, 574, 573, 572, 571, 570, 569, 568, 567, 566, 564, 564, 563, 563, 562, 555, 554, 553, 552, 551, 550, 549, 540, 540, 540, 539, 538, 537, 536, 535, 534, 534, 533, 532, 530, 529, 528, 527, 526, 525, 524, 523, 522, 518, 517, 516, 516, 514, 513, 511, 511, 510, 510, 509, 508, 507, 506, 505, 504, 503, 502, 502, 501, 500, 499, 499, 498, 497, 496, 495, 494, 494, 494, 493, 492, 491, 490, 489, 488, 487, 486, 484, 483, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 472, 471, 471, 471, 470, 469, 468, 467, 466, 466, 466, 459, 459, 458, 457, 457, 456, 455, 454, 453, 453, 451, 450, 449, 448, 448, 447, 446, 445, 444, 419, 418, 417, 416, 416, 415, 415, 415, 413, 412, 412, 411, 410, 409, 409, 409, 408, 407, 406, 404, 403, 402, 401, 400, 400, 400, 397, 397, 396, 395, 394, 394, 393, 392, 391, 390, 389, 389, 388, 388, 388, 387, 386, 384, 384, 384, 384, 384, 370, 369, 368, 333, 332, 328, 328, 326, 312, 311, 309, 307, 306, 305, 303, 303, 302, 302, 298, 292, 292, 292, 292, 291, 291, 289, 287, 282, 282, 281, 280, 280, 279, 278, 277, 277, 275, 274, 273, 272, 271, 271, 270, 270, 270, 270, 270, 270, 267, 267, 266, 265, 265, 264, 264, 264, 264, 264, 263, 262, 258, 258, 257, 256, 255, 255, 254, 254, 254, 253, 252, 251, 250, 250, 250, 249, 248, 247, 247, 247, 246, 245, 245, 243, 243, 243, 242, 242, 241, 240, 239, 238, 235, 235, 225, 225, 224, 224, 223, 223, 223, 222, 217, 217, 216, 216, 216, 214, 214, 213, 211, 211, 210, 210, 209, 209, 205, 205, 204, 204, 204, 204, 204, 203, 203, 202, 201, 201, 201, 201, 200, 200, 200, 200, 200, 200, 199, 199, 199, 199, 199, 196, 195, 194, 193, 191, 190, 190, 190, 189, 189, 189, 189, 189, 185, 185, 185, 185, 185, 185, 184, 183, 183, 183, 183, 182, 182, 181, 180, 180, 180, 180, 179, 176, 174, 173, 173, 173, 171, 171, 171, 170, 170, 168, 168, 168, 167, 167, 167, 166, 166, 166, 166, 165, 164, 163, 163, 163, 163, 163, 162, 162, 162, 162, 162, 162, 162, 161, 161, 160, 159, 159, 158, 158, 158, 158, 158, 158, 157, 157, 157, 157, 157, 157, 157, 157, 155, 155, 153, 131, 131, 131, 130, 128, 128, 127, 125, 124, 124, 124, 124, 124, 124, 123, 123, 123, 123, 123, 123, 122, 121, 121, 121, 121, 121, 113, 113, 113, 113, 103, 103, 103, 103, 103, 103, 103, 99, 98, 98, 97, 97, 97, 97, 96, 96, 95, 95, 95, 95, 94, 94, 92, 92, 92, 90, 90, 89, 89, 83, 83, 82, 81, 79, 78, 78, 78, 78, 78, 78, 77, 76, 76, 76, 74, 74, 74, 74, 74, 74, 74, 74, 74, 72, 72, 72, 72, 72, 72, 71, 71, 71, 70, 70, 70, 70, 69, 68, 68, 68, 68, 66, 66, 66, 66, 66, 66, 66, 66, 66, 65, 63, 61, 61, 61, 60, 60, 60, 59, 58, 58, 57, 54, 54, 54, 54, 53, 52, 51, 51, 51, 50, 50, 50, 50, 49, 46, 37, 37, 37, 37, 37, 37, 37, 37, 37, 36, 36, 36, 36, 35, 34, 34, 34, 34, 33, 33, 33, 33, 33, 32, 32, 32, 31, 31, 31, 30, 30, 30, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 16, 16, 16, 16, 16, 16, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
#graph_resilience = compute_resilience(graph_dict, attack_order )
#er_resilience = compute_resilience(er_graph,attack_order)
#er_resilience = [1239, 1238, 1237, 1236, 1235, 1234, 1233, 1232, 1231, 1230, 1229, 1228, 1227, 1226, 1225, 1224, 1223, 1222, 1221, 1220, 1219, 1218, 1217, 1216, 1215, 1214, 1213, 1212, 1211, 1210, 1209, 1208, 1207, 1206, 1205, 1204, 1203, 1202, 1201, 1200, 1199, 1198, 1197, 1196, 1195, 1194, 1193, 1192, 1191, 1190, 1189, 1188, 1187, 1186, 1185, 1184, 1183, 1182, 1181, 1180, 1179, 1178, 1177, 1176, 1175, 1174, 1173, 1172, 1171, 1170, 1169, 1168, 1167, 1166, 1165, 1164, 1163, 1162, 1161, 1160, 1159, 1158, 1157, 1156, 1155, 1154, 1153, 1152, 1151, 1150, 1149, 1148, 1147, 1146, 1145, 1144, 1143, 1142, 1141, 1140, 1139, 1138, 1137, 1136, 1135, 1134, 1133, 1132, 1131, 1130, 1129, 1128, 1127, 1126, 1125, 1124, 1123, 1122, 1121, 1120, 1119, 1118, 1117, 1116, 1115, 1114, 1113, 1112, 1111, 1110, 1109, 1108, 1107, 1106, 1105, 1104, 1103, 1102, 1101, 1100, 1099, 1098, 1097, 1096, 1095, 1094, 1093, 1092, 1091, 1090, 1089, 1088, 1087, 1086, 1085, 1084, 1083, 1082, 1081, 1080, 1079, 1078, 1077, 1076, 1075, 1074, 1073, 1072, 1071, 1070, 1069, 1068, 1067, 1066, 1065, 1064, 1063, 1062, 1061, 1060, 1059, 1058, 1057, 1056, 1055, 1054, 1053, 1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045, 1044, 1043, 1042, 1041, 1040, 1039, 1038, 1037, 1036, 1035, 1034, 1033, 1032, 1031, 1030, 1029, 1028, 1027, 1026, 1025, 1024, 1023, 1022, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1014, 1013, 1012, 1011, 1010, 1009, 1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001, 1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971, 970, 969, 968, 967, 966, 965, 964, 963, 962, 961, 960, 959, 958, 957, 956, 955, 954, 953, 952, 951, 950, 949, 948, 947, 946, 945, 944, 943, 942, 941, 940, 939, 938, 937, 936, 935, 934, 933, 932, 931, 930, 929, 928, 927, 926, 925, 924, 923, 922, 921, 920, 919, 918, 917, 916, 915, 914, 913, 912, 911, 910, 909, 908, 907, 906, 905, 904, 903, 902, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 888, 887, 886, 885, 884, 883, 882, 881, 880, 879, 878, 877, 876, 875, 874, 873, 872, 871, 870, 869, 868, 867, 866, 865, 864, 863, 862, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851, 850, 849, 848, 847, 846, 845, 844, 843, 842, 841, 840, 839, 838, 837, 836, 835, 834, 833, 832, 831, 830, 829, 828, 827, 826, 825, 824, 823, 822, 821, 820, 819, 818, 817, 816, 815, 814, 813, 812, 811, 810, 809, 808, 807, 806, 805, 804, 803, 802, 800, 799, 798, 797, 796, 795, 794, 793, 792, 791, 790, 789, 788, 787, 786, 785, 784, 783, 782, 781, 780, 779, 778, 777, 776, 775, 774, 773, 772, 771, 770, 769, 768, 767, 766, 765, 764, 763, 761, 759, 758, 757, 756, 755, 754, 753, 752, 751, 750, 749, 748, 747, 746, 745, 744, 743, 742, 741, 740, 739, 738, 737, 736, 735, 734, 733, 732, 731, 730, 729, 728, 727, 726, 725, 724, 723, 722, 721, 720, 719, 717, 716, 715, 714, 713, 712, 711, 710, 709, 708, 707, 706, 705, 704, 703, 702, 701, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 682, 681, 680, 679, 678, 677, 676, 675, 674, 673, 671, 670, 669, 668, 667, 666, 665, 664, 663, 662, 661, 660, 659, 658, 657, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 643, 642, 641, 640, 639, 638, 637, 636, 635, 634, 633, 632, 631, 630, 630, 629, 628, 627, 625, 624, 623, 622, 621, 620, 618, 617, 616, 615, 614, 613, 612, 611, 610, 609, 608, 607, 606, 605, 604, 603, 602, 601, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 590, 589, 588, 587, 586, 585, 584, 583, 582, 581, 580, 579, 578, 577, 576, 575, 574, 573, 572, 570, 569, 568, 567, 566, 565, 564, 563, 562, 561, 560, 559, 558, 557, 556, 555, 555, 554, 553, 551, 550, 549, 548, 547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 521, 520, 519, 518, 517, 516, 514, 513, 512, 511, 510, 509, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 458, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432, 431, 430, 428, 427, 426, 425, 424, 423, 422, 421, 419, 418, 417, 416, 414, 413, 412, 411, 410, 407, 406, 405, 404, 403, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 389, 389, 388, 387, 386, 386, 385, 384, 382, 381, 380, 379, 379, 378, 377, 376, 375, 374, 373, 372, 370, 369, 368, 367, 367, 367, 366, 365, 364, 363, 362, 360, 359, 356, 355, 354, 354, 353, 352, 351, 350, 347, 346, 345, 344, 343, 342, 342, 340, 339, 338, 337, 336, 336, 335, 335, 334, 333, 331, 330, 329, 328, 327, 326, 325, 322, 321, 320, 315, 313, 311, 310, 309, 308, 307, 303, 302, 301, 300, 299, 299, 298, 295, 294, 293, 293, 292, 290, 289, 288, 288, 287, 286, 285, 283, 282, 280, 278, 276, 276, 275, 274, 274, 273, 272, 271, 269, 268, 264, 263, 263, 261, 260, 260, 259, 254, 253, 250, 249, 248, 245, 244, 239, 238, 237, 236, 235, 232, 228, 227, 226, 225, 223, 223, 218, 217, 217, 214, 212, 211, 210, 209, 208, 207, 205, 204, 203, 200, 199, 195, 194, 192, 192, 192, 191, 190, 190, 190, 187, 187, 186, 184, 183, 182, 182, 182, 182, 180, 180, 179, 177, 176, 175, 170, 170, 170, 169, 168, 167, 167, 166, 165, 164, 164, 163, 163, 163, 162, 161, 158, 153, 152, 151, 150, 146, 146, 144, 142, 141, 141, 140, 138, 138, 138, 138, 138, 138, 138, 138, 138, 137, 137, 135, 134, 133, 131, 125, 124, 122, 122, 122, 121, 121, 120, 120, 117, 117, 116, 113, 112, 112, 112, 112, 111, 105, 98, 97, 96, 96, 94, 93, 92, 90, 79, 78, 77, 75, 72, 72, 72, 71, 71, 71, 70, 70, 69, 40, 40, 40, 40, 40, 40, 40, 40, 40, 39, 39, 39, 39, 36, 36, 34, 34, 34, 33, 33, 33, 33, 33, 33, 33, 31, 31, 30, 29, 29, 29, 28, 28, 27, 25, 25, 25, 25, 25, 23, 23, 23, 23, 23, 22, 22, 22, 21, 19, 15, 15, 15, 15, 15, 15, 15, 14]
#udp_resilience = compute_resilience(udp_graph,attack_order)
#udp_resilience = [1239, 1238, 1237, 1236, 1235, 1234, 1233, 1232, 1231, 1230, 1229, 1228, 1227, 1226, 1225, 1224, 1223, 1222, 1221, 1220, 1219, 1218, 1217, 1216, 1215, 1214, 1213, 1212, 1211, 1210, 1209, 1208, 1207, 1206, 1205, 1204, 1203, 1202, 1201, 1200, 1199, 1198, 1197, 1196, 1195, 1194, 1193, 1192, 1191, 1190, 1189, 1188, 1187, 1186, 1185, 1184, 1183, 1182, 1181, 1180, 1179, 1178, 1177, 1176, 1175, 1174, 1173, 1172, 1171, 1170, 1169, 1168, 1167, 1166, 1165, 1164, 1163, 1162, 1161, 1160, 1159, 1158, 1157, 1156, 1155, 1154, 1153, 1152, 1151, 1150, 1149, 1148, 1147, 1146, 1145, 1144, 1143, 1142, 1141, 1140, 1139, 1138, 1137, 1136, 1135, 1134, 1133, 1132, 1131, 1130, 1129, 1128, 1127, 1126, 1125, 1124, 1123, 1122, 1121, 1120, 1119, 1118, 1117, 1116, 1115, 1114, 1113, 1112, 1111, 1110, 1109, 1108, 1107, 1106, 1105, 1104, 1103, 1102, 1101, 1100, 1099, 1097, 1096, 1095, 1094, 1093, 1092, 1091, 1090, 1088, 1087, 1086, 1085, 1084, 1083, 1082, 1081, 1080, 1079, 1078, 1077, 1076, 1075, 1074, 1073, 1072, 1071, 1070, 1069, 1068, 1066, 1065, 1064, 1063, 1062, 1061, 1060, 1060, 1059, 1058, 1057, 1056, 1055, 1054, 1053, 1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045, 1044, 1043, 1042, 1041, 1040, 1039, 1038, 1037, 1036, 1035, 1034, 1033, 1032, 1031, 1030, 1029, 1028, 1027, 1026, 1025, 1024, 1023, 1022, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1014, 1013, 1012, 1011, 1010, 1009, 1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001, 1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971, 970, 969, 967, 966, 965, 964, 963, 962, 961, 960, 958, 957, 956, 954, 953, 952, 951, 950, 949, 948, 947, 946, 945, 944, 943, 941, 940, 939, 938, 936, 935, 934, 933, 932, 931, 930, 928, 927, 926, 925, 924, 923, 922, 921, 920, 919, 918, 917, 916, 915, 914, 913, 912, 911, 910, 908, 907, 906, 905, 903, 902, 901, 900, 899, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 888, 887, 886, 885, 884, 883, 882, 881, 880, 879, 878, 877, 876, 874, 873, 872, 871, 870, 869, 868, 867, 866, 865, 864, 863, 862, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851, 850, 849, 848, 847, 846, 845, 844, 843, 842, 840, 839, 838, 837, 836, 835, 834, 832, 830, 829, 828, 827, 826, 825, 824, 823, 822, 821, 818, 817, 816, 815, 814, 812, 811, 810, 809, 808, 806, 805, 804, 803, 802, 801, 800, 799, 798, 797, 796, 795, 794, 792, 790, 789, 788, 787, 785, 784, 783, 782, 781, 780, 779, 778, 777, 776, 775, 774, 773, 772, 770, 769, 768, 767, 766, 765, 764, 762, 761, 760, 759, 758, 757, 756, 755, 754, 752, 750, 749, 747, 746, 744, 743, 742, 741, 741, 739, 738, 737, 736, 735, 733, 732, 732, 729, 728, 727, 725, 724, 723, 723, 722, 721, 720, 719, 718, 715, 714, 712, 711, 710, 709, 708, 707, 706, 706, 705, 704, 701, 700, 699, 698, 697, 697, 696, 694, 693, 692, 691, 690, 687, 686, 685, 684, 683, 682, 679, 678, 677, 676, 675, 674, 673, 672, 671, 671, 670, 669, 668, 668, 667, 666, 665, 664, 663, 663, 662, 660, 658, 657, 656, 655, 654, 653, 650, 649, 648, 647, 646, 645, 645, 644, 643, 642, 638, 637, 635, 634, 633, 632, 630, 630, 629, 628, 627, 627, 627, 625, 624, 622, 621, 616, 615, 614, 611, 610, 609, 607, 606, 605, 605, 604, 603, 602, 601, 601, 600, 599, 598, 597, 588, 588, 587, 586, 585, 584, 583, 582, 581, 577, 576, 575, 574, 573, 566, 565, 564, 563, 562, 559, 558, 556, 556, 555, 554, 553, 552, 551, 550, 550, 549, 548, 547, 546, 546, 545, 544, 543, 542, 540, 539, 538, 537, 536, 534, 533, 532, 529, 525, 525, 524, 523, 522, 520, 519, 518, 518, 517, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 506, 505, 503, 502, 501, 499, 498, 497, 496, 496, 494, 493, 492, 491, 491, 490, 488, 486, 484, 483, 482, 481, 481, 479, 476, 472, 471, 469, 467, 466, 463, 459, 458, 457, 456, 455, 454, 452, 452, 449, 448, 447, 444, 441, 440, 439, 439, 438, 438, 436, 435, 434, 430, 429, 429, 428, 427, 426, 426, 422, 421, 420, 419, 419, 417, 417, 416, 415, 415, 414, 413, 412, 411, 410, 407, 405, 404, 402, 401, 399, 398, 397, 395, 394, 394, 393, 392, 390, 390, 389, 389, 388, 387, 386, 386, 385, 383, 382, 382, 381, 380, 375, 372, 372, 372, 370, 370, 368, 367, 366, 365, 365, 363, 362, 357, 356, 355, 354, 351, 350, 348, 347, 346, 345, 344, 344, 330, 329, 328, 325, 324, 324, 318, 318, 310, 309, 309, 308, 301, 297, 296, 296, 295, 294, 293, 292, 291, 287, 287, 286, 285, 284, 282, 282, 281, 281, 281, 279, 278, 274, 273, 273, 270, 268, 267, 267, 266, 265, 240, 239, 238, 238, 238, 236, 234, 234, 234, 228, 228, 226, 226, 226, 226, 226, 226, 225, 225, 224, 224, 223, 223, 222, 222, 222, 222, 221, 220, 220, 217, 215, 215, 215, 215, 215, 215, 213, 210, 210, 209, 208, 205, 204, 202, 201, 193, 192, 175, 174, 173, 172, 158, 158, 105, 105, 105, 105, 105, 104, 99, 99, 69, 66, 66, 66, 66, 66, 66, 66, 62, 62, 62, 62, 62, 61, 59, 59, 59, 59, 59, 57, 57, 53, 52, 52, 52, 42, 42, 42, 42, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41, 40, 26, 26, 26, 26, 26, 26, 26, 26, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 22, 22, 22, 20, 20, 20, 20, 20, 20, 20, 20, 19, 19, 19, 19, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 8, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]

#for idx in range(len(graph_resilience) - len(er_resilience)):
#    er_resilience.append(0)
#    udp_resilience.append(0)
    
#print "graph", len(graph_resilience)
#print "ER", len(er_resilience)
#print "UDP", len(udp_resilience)

graph_plot(graph_resilience, er_resilience, udp_resilience)

def plot_udp_graph():
    idx = []
    val_target = []
    val_fast = []
    for node in range(10,1000,10):
        udp_graph = random_UPA_graph(node,5)
        idx.append(node)
        
        start_time = time.time()
        targeted_order(udp_graph)
        stop_time = time.time()
        val_target.append(stop_time - start_time)
        
        start_time = time.time()
        fast_targeted_order(udp_graph)
        stop_time = time.time()
        val_fast.append(stop_time - start_time)
        
        
    #plt.plot(idx,val_target,'b', label='Targeted Order')
    plt.plot(idx,val_fast,'r', label='Fast Targeted Order')
    
    #plt.xscale("log")
    #plt.yscale("log")
    #plt.title("Log/Log plot of in_degree distribution")
    plt.title("Running Time Comparison Targeted vs Fast Targeted")
    plt.ylabel("Running Time")
    plt.xlabel("Number of Nodes")
    plt.legend(loc="upper right")
    plt.grid()
    #plt.figure(figsize=[10.0,10.0],dpi=600,frameon=True)
    #plt.draw()
    plt.show()

#print udp_graph

#print "target order",targeted_order(udp_graph)

#print "fast order", fast_targeted_order(udp_graph)

#plot_udp_graph()


#lst = random_ER_graph(8,0.05)   
#print random_order(lst)